// Math Problems functionality
let currentUser = null;
let currentProblem = null;
let problemStartTime = null;
let correctCount = 0;
let incorrectCount = 0;
let totalProblems = 0;
let bestTime = null;
let recentProblems = [];

// Settings
let difficulty = 'easy';
let activeOperations = ['+', '-'];
let difficultyRanges = {
    easy: { min: 1, max: 10 },
    medium: { min: 1, max: 50 },
    hard: { min: 1, max: 100 }
};

// Pre-defined problems for each difficulty level (100 each)
const predefinedProblems = {
    easy: {
        '+': [],
        '-': [],
        '*': [],
        '/': []
    },
    medium: {
        '+': [],
        '-': [],
        '*': [],
        '/': []
    },
    hard: {
        '+': [],
        '-': [],
        '*': [],
        '/': []
    }
};

// Generate predefined problems
function generatePredefinedProblems() {
    console.log('üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå...');
    
    // Easy problems (1-10)
    generateProblemsForDifficulty('easy', 1, 10, 25);
    
    // Medium problems (1-50)
    generateProblemsForDifficulty('medium', 1, 50, 25);
    
    // Hard problems (1-100)
    generateProblemsForDifficulty('hard', 1, 100, 25);
    
    // Count total problems
    let totalProblems = 0;
    Object.keys(predefinedProblems).forEach(level => {
        Object.keys(predefinedProblems[level]).forEach(op => {
            totalProblems += predefinedProblems[level][op].length;
        });
    });
    
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: ${totalProblems} ‡∏Ç‡πâ‡∏≠`);
    console.log('üìä ‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå:');
    Object.keys(predefinedProblems).forEach(level => {
        const levelTotal = Object.keys(predefinedProblems[level]).reduce((sum, op) => 
            sum + predefinedProblems[level][op].length, 0);
        console.log(`   ${level}: ${levelTotal} ‡∏Ç‡πâ‡∏≠`);
    });
}

function generateProblemsForDifficulty(level, min, max, count) {
    const problems = predefinedProblems[level];
    
    // Addition problems - various patterns
    for (let i = 0; i < count; i++) {
        let num1, num2;
        
        if (i < count / 4) {
            // Pattern 1: Simple sequential additions
            num1 = Math.floor(i * max / count) + min;
            num2 = Math.floor(Math.random() * 5) + 1;
        } else if (i < count / 2) {
            // Pattern 2: Even numbers
            num1 = (Math.floor(Math.random() * (max/2)) + 1) * 2;
            num2 = (Math.floor(Math.random() * (max/2)) + 1) * 2;
        } else if (i < 3 * count / 4) {
            // Pattern 3: Round numbers (ending in 0 or 5)
            const base1 = Math.floor(Math.random() * (max/10)) + 1;
            const base2 = Math.floor(Math.random() * (max/10)) + 1;
            num1 = base1 * (Math.random() > 0.5 ? 10 : 5);
            num2 = base2 * (Math.random() > 0.5 ? 10 : 5);
        } else {
            // Pattern 4: Random numbers
            num1 = Math.floor(Math.random() * max) + min;
            num2 = Math.floor(Math.random() * max) + min;
        }
        
        if (num1 > max) num1 = max;
        if (num2 > max) num2 = max;
        
        problems['+'].push({
            num1,
            num2,
            answer: num1 + num2,
            display: `${num1} + ${num2}`
        });
    }
    
    // Subtraction problems - ensure positive results with variety
    for (let i = 0; i < count; i++) {
        let num1, num2;
        
        if (i < count / 3) {
            // Pattern 1: Large number minus small number
            num1 = Math.floor(Math.random() * max) + Math.floor(max/2);
            num2 = Math.floor(Math.random() * Math.floor(max/3)) + 1;
        } else if (i < 2 * count / 3) {
            // Pattern 2: Close numbers (difference < 10)
            num1 = Math.floor(Math.random() * max) + min;
            num2 = Math.floor(Math.random() * Math.min(10, num1)) + 1;
        } else {
            // Pattern 3: Any valid subtraction
            num1 = Math.floor(Math.random() * max) + min;
            num2 = Math.floor(Math.random() * num1) + 1;
        }
        
        if (num1 > max) num1 = max;
        if (num2 >= num1) num2 = num1 - 1;
        
        problems['-'].push({
            num1,
            num2,
            answer: num1 - num2,
            display: `${num1} - ${num2}`
        });
    }
    
    // Multiplication problems - use appropriate ranges
    for (let i = 0; i < count; i++) {
        const maxMult = level === 'easy' ? 5 : level === 'medium' ? 12 : 15;
        let num1, num2;
        
        if (i < count / 4) {
            // Pattern 1: Multiplication tables (1-12)
            num1 = Math.floor(Math.random() * Math.min(12, maxMult)) + 1;
            num2 = Math.floor(Math.random() * Math.min(12, maxMult)) + 1;
        } else if (i < count / 2) {
            // Pattern 2: One number is small (good for learning)
            num1 = Math.floor(Math.random() * maxMult) + 1;
            num2 = Math.floor(Math.random() * 5) + 1;
        } else if (i < 3 * count / 4) {
            // Pattern 3: Powers of 2, 5, 10
            const powers = [2, 5, 10];
            num1 = powers[Math.floor(Math.random() * powers.length)];
            num2 = Math.floor(Math.random() * maxMult) + 1;
        } else {
            // Pattern 4: Random within range
            num1 = Math.floor(Math.random() * maxMult) + 1;
            num2 = Math.floor(Math.random() * maxMult) + 1;
        }
        
        problems['*'].push({
            num1,
            num2,
            answer: num1 * num2,
            display: `${num1} √ó ${num2}`
        });
    }
    
    // Division problems - ensure whole number results with variety
    for (let i = 0; i < count; i++) {
        let answer, num2, num1;
        
        if (i < count / 4) {
            // Pattern 1: Small quotients
            answer = Math.floor(Math.random() * 10) + 1;
            num2 = Math.floor(Math.random() * 10) + 1;
            num1 = answer * num2;
        } else if (i < count / 2) {
            // Pattern 2: Division by common divisors (2, 3, 4, 5, 10)
            const divisors = [2, 3, 4, 5, 10];
            num2 = divisors[Math.floor(Math.random() * divisors.length)];
            answer = Math.floor(Math.random() * (level === 'easy' ? 10 : level === 'medium' ? 20 : 30)) + 1;
            num1 = answer * num2;
        } else if (i < 3 * count / 4) {
            // Pattern 3: Perfect squares divided by their roots
            const roots = [2, 3, 4, 5, 6, 7, 8, 9, 10];
            const root = roots[Math.floor(Math.random() * roots.length)];
            if (level === 'easy' && root <= 5) {
                num1 = root * root;
                num2 = root;
                answer = root;
            } else if (level === 'medium' && root <= 8) {
                num1 = root * root;
                num2 = root;
                answer = root;
            } else if (level === 'hard') {
                num1 = root * root;
                num2 = root;
                answer = root;
            } else {
                // Fallback to simple division
                answer = Math.floor(Math.random() * 10) + 1;
                num2 = Math.floor(Math.random() * 5) + 1;
                num1 = answer * num2;
            }
        } else {
            // Pattern 4: Random valid division
            const maxDiv = level === 'easy' ? 10 : level === 'medium' ? 25 : 50;
            answer = Math.floor(Math.random() * maxDiv) + 1;
            num2 = Math.floor(Math.random() * 15) + 1;
            num1 = answer * num2;
        }
        
        problems['/'].push({
            num1,
            num2,
            answer,
            display: `${num1} √∑ ${num2}`
        });
    }
}

// Wait for dependencies to load
async function waitForDependencies() {
    let attempts = 0;
    const maxAttempts = 50;
    
    while (attempts < maxAttempts) {
        if (window.nekouAuth && window.api) {
            return true;
        }
        await new Promise(resolve => setTimeout(resolve, 100));
        attempts++;
    }
    
    console.warn('‚ö†Ô∏è Some dependencies not loaded, continuing anyway');
    return false;
}

document.addEventListener('DOMContentLoaded', async () => {
    console.log('üéÆ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ Math Game...');
    
    // Wait for dependencies
    const dependenciesLoaded = await waitForDependencies();
    
    try {
        if (dependenciesLoaded && window.nekouAuth) {
            // Check if user is authenticated
            if (nekouAuth.isAuthenticated()) {
                currentUser = nekouAuth.getUser();
                console.log('üë§ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', currentUser);
            } else {
                console.log('‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á...');
                window.location.href = '/index.html';
                return;
            }
        } else {
            console.warn('‚ö†Ô∏è Dependencies ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°');
            window.location.href = '/index.html';
            return;
        }

        // Initialize Bootstrap dropdown
        initializeDropdown();

        // Update user display
        updateUserDisplay();

        await initializeMath();

        console.log('üéÆ ‡∏´‡∏ô‡πâ‡∏≤ Math Game ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:', error);
        // Fallback: redirect to login
        window.location.href = '/index.html';
    }
});

async function initializeMath() {
    try {
        // Initialize problem display
        document.getElementById('problemDisplay').innerHTML = `
            <div class="text-center text-muted">
                <i class="bi bi-calculator fs-1 mb-3"></i><br>
                ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            </div>
        `;
        
        // Generate predefined problems
        console.log('üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå...');
        generatePredefinedProblems();
        
        // Load user statistics
        await loadMathStats();
        
        // Initialize form handlers
        const answerInput = document.getElementById('answerInput');
        if (answerInput) {
            answerInput.addEventListener('keypress', handleKeyPress);
        }
        
        // Add event listeners for buttons
        const newProblemBtn = document.getElementById('newProblemBtn');
        if (newProblemBtn) {
            newProblemBtn.addEventListener('click', function(e) {
                e.preventDefault();
                console.log('üéØ ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏î (event listener)');
                generateProblem();
            });
        }
        
        const hintBtn = document.getElementById('hintBtn');
        if (hintBtn) {
            hintBtn.addEventListener('click', function(e) {
                e.preventDefault();
                console.log('üí° ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏î (event listener)');
                showHint();
            });
        }
        
        const checkBtn = document.getElementById('checkBtn');
        if (checkBtn) {
            checkBtn.addEventListener('click', function(e) {
                e.preventDefault();
                console.log('‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏Å‡∏î (event listener)');
                checkAnswer();
            });
        }
        
        // Update display
        updateStatsDisplay();
        
        console.log('‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
        
        // Test function availability
        console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:');
        console.log('  - generateProblem:', typeof generateProblem);
        console.log('  - showHint:', typeof showHint);
        console.log('  - checkAnswer:', typeof checkAnswer);
        console.log('  - activeOperations:', activeOperations);
        console.log('  - difficulty:', difficulty);
        console.log('  - predefinedProblems length:', Object.keys(predefinedProblems).length);
        
    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:', error);
    }
}

function generateProblem() {
    console.log('üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà...');
    
    // Initialize variables if they don't exist
    if (!activeOperations || activeOperations.length === 0) {
        console.log('‚ö†Ô∏è activeOperations ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà...');
        activeOperations = ['+', '-']; // Default operations
    }
    
    if (!difficulty) {
        console.log('‚ö†Ô∏è difficulty ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà...');
        difficulty = 'easy'; // Default difficulty
    }
    
    if (!predefinedProblems || Object.keys(predefinedProblems).length === 0) {
        console.log('‚ö†Ô∏è predefinedProblems ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...');
        generatePredefinedProblems();
    }
    
    console.log('üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:');
    console.log('  - activeOperations:', activeOperations);
    console.log('  - difficulty:', difficulty);
    console.log('  - predefinedProblems keys:', Object.keys(predefinedProblems));
    
    const operation = activeOperations[Math.floor(Math.random() * activeOperations.length)];
    console.log('üìä ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:', operation);
    console.log('üìà ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å:', difficulty);
    
    // Check if predefined problems exist
    const hasPredefinedProblems = predefinedProblems[difficulty] && 
                                  predefinedProblems[difficulty][operation] && 
                                  predefinedProblems[difficulty][operation].length > 0;
    
    console.log('üìö ‡∏°‡∏µ‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà:', hasPredefinedProblems);
    
    // Always use dynamic generation for now to ensure it works
    console.log('üé≤ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°...');
    
    const range = difficultyRanges[difficulty] || { min: 1, max: 10 };
    let num1, num2, answer;
    
    console.log('üé≤ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö:', difficulty, '‡∏ä‡πà‡∏ß‡∏á:', range);
    
    switch (operation) {
        case '+':
            num1 = Math.floor(Math.random() * range.max) + range.min;
            num2 = Math.floor(Math.random() * range.max) + range.min;
            answer = num1 + num2;
            break;
            
        case '-':
            num1 = Math.floor(Math.random() * range.max) + range.min;
            if (num1 <= 1) num1 = 2; // Ensure we can subtract
            num2 = Math.floor(Math.random() * (num1 - 1)) + 1; // Ensure positive result
            answer = num1 - num2;
            break;
            
        case '*':
            // For multiplication, use smaller numbers
            const maxMult = difficulty === 'easy' ? 5 : difficulty === 'medium' ? 12 : 15;
            num1 = Math.floor(Math.random() * maxMult) + 1;
            num2 = Math.floor(Math.random() * maxMult) + 1;
            answer = num1 * num2;
            break;
            
        case '/':
            // For division, generate answer first then multiply
            answer = Math.floor(Math.random() * 10) + 1;
            num2 = Math.floor(Math.random() * 10) + 1;
            num1 = answer * num2;
            break;
            
        default:
            // Fallback to simple addition
            num1 = Math.floor(Math.random() * 10) + 1;
            num2 = Math.floor(Math.random() * 10) + 1;
            answer = num1 + num2;
            operation = '+';
    }
    
    currentProblem = {
        num1,
        num2,
        operation,
        answer,
        display: `${num1} ${operation === '*' ? '√ó' : operation === '/' ? '√∑' : operation} ${num2}`,
        source: 'dynamic'
    };
    
    console.log('üé≤ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà:', currentProblem);
    
    console.log('‚úÖ ‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß:', currentProblem);
    
    // Display problem
    const problemDisplay = document.getElementById('problemDisplay');
    if (problemDisplay) {
        problemDisplay.textContent = currentProblem.display;
        console.log('üì∫ ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå:', currentProblem.display);
    } else {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö element problemDisplay');
    }
    
    // Reset input and enable controls
    const answerInput = document.getElementById('answerInput');
    if (answerInput) {
        answerInput.value = '';
        answerInput.disabled = false;
        answerInput.focus();
        console.log('‚å®Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô input');
    } else {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö element answerInput');
    }
    
    const checkBtn = document.getElementById('checkBtn');
    const hintBtn = document.getElementById('hintBtn');
    
    if (checkBtn) {
        checkBtn.disabled = false;
        console.log('üîò ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö');
    } else {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö element checkBtn');
    }
    
    if (hintBtn) {
        hintBtn.disabled = false;
        console.log('üí° ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ');
    } else {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö element hintBtn');
    }
    
    // Hide feedback
    const feedbackMessage = document.getElementById('feedbackMessage');
    if (feedbackMessage) {
        feedbackMessage.style.display = 'none';
    }
    
    // Start timer
    problemStartTime = Date.now();
    startProblemTimer();
    
    console.log('üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!');
}

function checkAnswer() {
    const answerInput = document.getElementById('answerInput');
    const userAnswer = parseFloat(answerInput.value);
    
    if (isNaN(userAnswer)) {
        if (typeof utils !== 'undefined' && utils.showAlert) {
            utils.showAlert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç', 'warning');
        } else {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç');
        }
        answerInput.focus();
        return;
    }
    
    const timeSpent = (Date.now() - problemStartTime) / 1000;
    const isCorrect = Math.abs(userAnswer - currentProblem.answer) < 0.01; // Handle floating point precision
    
    totalProblems++;
    
    if (isCorrect) {
        correctCount++;
        showFeedback('‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! üéâ', 'correct');
        
        // Update best time
        if (!bestTime || timeSpent < bestTime) {
            bestTime = timeSpent;
        }
    } else {
        incorrectCount++;
        showFeedback(`‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á üòÖ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏∑‡∏≠ ${currentProblem.answer}`, 'incorrect');
    }
    
    // Save to recent problems
    addToRecentProblems(currentProblem, userAnswer, isCorrect, timeSpent);
    
    // Save to database
    saveMathProblem(currentProblem, userAnswer, isCorrect, timeSpent);
    
    // Update display
    updateStatsDisplay();
    updateRecentProblems();
    
    // Disable controls
    answerInput.disabled = true;
    document.getElementById('checkBtn').disabled = true;
    document.getElementById('hintBtn').disabled = true;
    
    // Stop timer
    stopProblemTimer();
}

function showFeedback(message, type) {
    const feedbackElement = document.getElementById('feedbackMessage');
    feedbackElement.textContent = message;
    feedbackElement.className = `feedback-message feedback-${type}`;
    feedbackElement.style.display = 'block';
}

function showHint() {
    if (!currentProblem) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô');
        return;
    }
    
    let hintText = '';
    const { num1, num2, operation, answer } = currentProblem;
    
    switch (operation) {
        case '+':
            hintText = `‡∏•‡∏≠‡∏á‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å ${num1} ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å ${num2}\n`;
            hintText += `${num1} + 1 = ${num1 + 1}\n`;
            hintText += `${num1} + 2 = ${num1 + 2}\n`;
            hintText += `...‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ ‡∏à‡∏ô‡∏Ñ‡∏£‡∏ö ${num2} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`;
            break;
            
        case '-':
            hintText = `‡∏•‡∏≠‡∏á‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å ${num1}\n`;
            hintText += `${num1} - 1 = ${num1 - 1}\n`;
            hintText += `${num1} - 2 = ${num1 - 2}\n`;
            hintText += `...‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ ‡∏à‡∏ô‡∏Ñ‡∏£‡∏ö ${num2} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`;
            break;
            
        case '*':
            hintText = `${num1} √ó ${num2} ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡πÄ‡∏≠‡∏≤ ${num1} ‡∏°‡∏≤ ${num2} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n`;
            hintText += `${num1}`;
            for (let i = 1; i < num2 && i < 5; i++) { // Limit for readability
                hintText += ` + ${num1}`;
            }
            if (num2 > 5) hintText += ` + ... `;
            hintText += `\n= ${answer}`;
            break;
            
        case '/':
            hintText = `${num1} √∑ ${num2} ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á ${num1} ‡πÅ‡∏ö‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô ${num2} ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô\n`;
            hintText += `‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤ ${num2} √ó ? = ${num1}\n`;
            hintText += `‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠ ${answer}`;
            break;
    }
    
    // Try to use Bootstrap modal first
    try {
        const hintContent = document.getElementById('hintContent');
        const hintModal = document.getElementById('hintModal');
        
        if (hintContent && hintModal && typeof bootstrap !== 'undefined') {
            hintContent.innerHTML = hintText.replace(/\n/g, '<br>');
            const modal = new bootstrap.Modal(hintModal);
            modal.show();
        } else {
            // Fallback to alert if modal not available
            alert('üí° ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ:\n\n' + hintText);
        }
    } catch (error) {
        console.error('Error showing hint modal:', error);
        // Fallback to alert
        alert('üí° ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ:\n\n' + hintText);
    }
}

function setDifficulty(level) {
    difficulty = level;
    
    // Update button states
    document.querySelectorAll('.difficulty-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-level="${level}"]`).classList.add('active');
}

function toggleOperation(op) {
    const btn = document.querySelector(`[data-op="${op}"]`);
    
    if (activeOperations.includes(op)) {
        // Remove operation
        activeOperations = activeOperations.filter(operation => operation !== op);
        btn.classList.remove('active');
    } else {
        // Add operation
        activeOperations.push(op);
        btn.classList.add('active');
    }
    
    // Ensure at least one operation is selected
    if (activeOperations.length === 0) {
        activeOperations.push('+');
        document.querySelector('[data-op="+"]').classList.add('active');
    }
}

function addToRecentProblems(problem, userAnswer, isCorrect, timeSpent) {
    const recentItem = {
        problem: problem.display,
        userAnswer,
        correctAnswer: problem.answer,
        isCorrect,
        timeSpent: timeSpent.toFixed(1)
    };
    
    recentProblems.unshift(recentItem);
    
    // Keep only last 5 problems
    if (recentProblems.length > 5) {
        recentProblems.pop();
    }
}

function updateRecentProblems() {
    const container = document.getElementById('recentProblems');
    
    if (recentProblems.length === 0) {
        container.innerHTML = '<div class="text-muted">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏à‡∏ó‡∏¢‡πå</div>';
        return;
    }
    
    let html = '';
    recentProblems.forEach(item => {
        const icon = item.isCorrect ? '‚úÖ' : '‚ùå';
        const color = item.isCorrect ? 'text-success' : 'text-danger';
        
        html += `
            <div class="small mb-2 ${color}">
                ${icon} ${item.problem} = ${item.userAnswer}
                <br><small class="text-muted">${item.timeSpent}s</small>
            </div>
        `;
    });
    
    container.innerHTML = html;
}

function updateStatsDisplay() {
    document.getElementById('correctCount').textContent = correctCount;
    document.getElementById('incorrectCount').textContent = incorrectCount;
    document.getElementById('totalProblems').textContent = totalProblems;
    
    const accuracy = totalProblems > 0 ? Math.round((correctCount / totalProblems) * 100) : 0;
    document.getElementById('accuracy').textContent = accuracy + '%';
    
    document.getElementById('bestTime').textContent = bestTime ? bestTime.toFixed(1) + 's' : '-';
}

async function resetStats() {
    let confirmed;
    
    if (typeof utils !== 'undefined' && utils.showConfirm) {
        confirmed = await utils.showConfirm(
            'üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', 
            '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î? ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ',
            '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏•‡∏¢',
            '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
            'warning'
        );
    } else {
        confirmed = confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î? ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ');
    }
    
    if (confirmed) {
        correctCount = 0;
        incorrectCount = 0;
        totalProblems = 0;
        bestTime = null;
        recentProblems = [];
        
        updateStatsDisplay();
        updateRecentProblems();
        
        if (typeof utils !== 'undefined' && utils.showToast) {
            utils.showToast('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! üîÑ', 'success');
        } else {
            alert('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
        }
    }
}

let timerInterval = null;

function startProblemTimer() {
    let seconds = 0;
    timerInterval = setInterval(() => {
        seconds++;
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        document.getElementById('problemTimer').textContent = 
            `‚è∞ ${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
    }, 1000);
}

function stopProblemTimer() {
    if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
    }
}

function handleKeyPress(e) {
    if (e.key === 'Enter') {
        checkAnswer();
    }
}

async function loadMathStats() {
    try {
        if (!currentUser || !currentUser.id) {
            console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ');
            // Reset stats to default
            totalProblems = 0;
            correctCount = 0;
            incorrectCount = 0;
            bestTime = null;
            return;
        }
        
        const response = await api.math.getAll();
        const data = response.data || [];
        
        if (data.length > 0) {
            console.log('üìä ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', data.length, '‡πÇ‡∏à‡∏ó‡∏¢‡πå');
            
            // Calculate statistics
            totalProblems = data.length;
            correctCount = data.filter(p => p.isCorrect || p.is_correct).length;
            incorrectCount = totalProblems - correctCount;
            
            // Find best time
            const timesArray = data
                .filter(p => (p.timeSpent || p.time_spent) > 0)
                .map(p => p.timeSpent || p.time_spent);
            
            if (timesArray.length > 0) {
                bestTime = Math.min(...timesArray);
            }
            
            // Store recent problems
            recentProblems = data.slice(0, 10);
            
            console.log('üìä ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á', currentUser.firstName, '‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:', {
                totalProblems,
                correctCount,
                incorrectCount,
                bestTime: bestTime ? bestTime + 's' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ'
            });
        } else {
            console.log('‚ÑπÔ∏è', currentUser.firstName, '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ');
            totalProblems = 0;
            correctCount = 0;
            incorrectCount = 0;
            bestTime = null;
        }
        
        // Update UI stats
        updateStatsDisplay();
        
    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:', error);
        // Show error to user
        if (typeof utils !== 'undefined' && utils.showAlert) {
            utils.showAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', 'error');
        }
    }
}


async function saveMathProblem(problem, userAnswer, isCorrect, timeSpent) {
    if (!currentUser || !currentUser.id) {
        console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ');
        return;
    }
    try {
        console.log('üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', currentUser.firstName, 'ID:', currentUser.id);
        const mathData = {
            problemText: problem.display,
            correctAnswer: problem.answer.toString(),
            userAnswer: userAnswer.toString(),
            isCorrect: isCorrect,
            timeSpent: timeSpent,
            difficulty: difficulty,
            operation: problem.operation
        };
        const response = await api.math.create(mathData);
        if (response.success) {
            console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
        } else {
            throw new Error(response.message || 'Failed to save math problem');
        }
    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå:', error);
        // Show error to user
        if (typeof utils !== 'undefined' && utils.showAlert) {
            utils.showAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå', 'error');
        }
    }
}

async function logout() {
    let confirmed;
    
    if (typeof utils !== 'undefined' && utils.showConfirm) {
        confirmed = await utils.showConfirm(
            'üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö', 
            '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö?',
            '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö',
            '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
            'warning'
        );
    } else {
        confirmed = confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö?');
    }
    
    if (!confirmed) {
        return;
    }
    
    try {
        // Use nekouAuth logout
        if (window.nekouAuth) {
            await nekouAuth.logout();
        } else {
            // Fallback: clear local storage and redirect
            localStorage.clear();
            sessionStorage.clear();
            window.location.href = '/index.html';
        }
        
    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö:', error);
        
        if (typeof utils !== 'undefined' && utils.showAlert) {
            utils.showAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö', 'error');
        } else {
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö');
        }
    }
}

function initializeDropdown() {
    // Ensure dropdown works properly
    const dropdownElementList = document.querySelectorAll('.dropdown-toggle');
    const dropdownList = [...dropdownElementList].map(dropdownToggleEl => new bootstrap.Dropdown(dropdownToggleEl));
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function(event) {
        const dropdowns = document.querySelectorAll('.dropdown-menu.show');
        dropdowns.forEach(dropdown => {
            if (!dropdown.contains(event.target) && !dropdown.previousElementSibling.contains(event.target)) {
                const dropdownInstance = bootstrap.Dropdown.getInstance(dropdown.previousElementSibling);
                if (dropdownInstance) {
                    dropdownInstance.hide();
                }
            }
        });
    });
}

function updateUserDisplay() {
    const userName = document.getElementById('userName');
    if (userName && currentUser) {
        let displayName;
        
        if (currentUser.isGuest) {
            displayName = 'üëª ' + currentUser.firstName;
        } else {
            // Display real user name from authentication
            displayName = currentUser.firstName && currentUser.lastName 
                ? `${currentUser.firstName} ${currentUser.lastName}`
                : currentUser.email || currentUser.username || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
        }
        
        userName.textContent = displayName;
        console.log('üë§ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', displayName);
        
        // Add a note for guest users
        if (currentUser.isGuest) {
            console.log('‚ÑπÔ∏è ‡πÇ‡∏´‡∏°‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å');
        }
    } else {
        console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ');
        if (userName) {
            userName.textContent = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
        }
    }
}

// Navigation functions
function showProfile() {
    if (typeof utils !== 'undefined' && utils.redirect) {
        utils.redirect('settings.html');
    } else {
        window.location.href = 'settings.html';
    }
}

// Show available problems info
function showProblemsInfo() {
    let info = 'üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå\n\n';
    
    Object.keys(predefinedProblems).forEach(level => {
        const levelName = level === 'easy' ? '‡∏á‡πà‡∏≤‡∏¢' : level === 'medium' ? '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' : '‡∏¢‡∏≤‡∏Å';
        info += `${levelName}:\n`;
        
        Object.keys(predefinedProblems[level]).forEach(op => {
            const count = predefinedProblems[level][op].length;
            const opName = op === '+' ? '‡∏ö‡∏ß‡∏Å' : op === '-' ? '‡∏•‡∏ö' : op === '*' ? '‡∏Ñ‡∏π‡∏ì' : '‡∏´‡∏≤‡∏£';
            info += `  ${opName}: ${count} ‡∏Ç‡πâ‡∏≠\n`;
        });
        
        const total = Object.keys(predefinedProblems[level]).reduce((sum, op) => 
            sum + predefinedProblems[level][op].length, 0);
        info += `  ‡∏£‡∏ß‡∏°: ${total} ‡∏Ç‡πâ‡∏≠\n\n`;
    });
    
    const grandTotal = Object.keys(predefinedProblems).reduce((sum, level) => 
        sum + Object.keys(predefinedProblems[level]).reduce((levelSum, op) => 
            levelSum + predefinedProblems[level][op].length, 0), 0);
    
    info += `üéØ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${grandTotal} ‡∏Ç‡πâ‡∏≠`;
    
    alert(info);
}

console.log('‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');

// Make functions globally accessible
window.generateProblem = generateProblem;
window.checkAnswer = checkAnswer;
window.showHint = showHint;
window.setDifficulty = setDifficulty;
window.toggleOperation = toggleOperation;
window.resetStats = resetStats;
window.showProblemsInfo = showProblemsInfo;
window.showProfile = showProfile;
window.logout = logout;
