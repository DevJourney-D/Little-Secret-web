// Neko Chat (AI Chatbot) functionality
let currentUser = null;
let conversations = [];
let currentMood = 'happy';

document.addEventListener('DOMContentLoaded', async () => {
    currentUser = utils.getCurrentUser();
    
    if (!currentUser) {
        utils.redirect('index.html');
        return;
    }
    
    // Initialize Bootstrap dropdown
    initializeDropdown();
    
    // Update user display
    updateUserDisplay();
    
    await initializeNekoChat();
});

async function initializeNekoChat() {
    // Initialize form handlers
    const messageForm = document.getElementById('messageForm');
    const messageInput = document.getElementById('messageInput');
    
    if (messageForm) {
        messageForm.addEventListener('submit', handleSendMessage);
    }
    
    if (messageInput) {
        messageInput.addEventListener('keypress', handleKeyPress);
        messageInput.focus();
    }
    
    // Initialize mood selector
    const moodOptions = document.querySelectorAll('.mood-option');
    moodOptions.forEach(option => {
        option.addEventListener('click', selectMood);
    });
    
    // Load previous conversations
    await loadConversations();
    
    // Show welcome message if no previous conversations
    if (conversations.length === 0) {
        setTimeout(() => {
            addNekoMessage("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏â‡∏±‡∏ô‡πÄ‡∏ô‡πÇ‡∏Å‡∏∞ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÅ‡∏≠‡∏õ Neko U üê±üíï\n\n‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏•‡πà‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏°‡∏≠!\n\n‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?");
        }, 1000);
    }
}

function selectMood(e) {
    // Remove previous selection
    document.querySelectorAll('.mood-option').forEach(opt => {
        opt.classList.remove('selected');
    });
    
    // Add selection to clicked option
    e.target.classList.add('selected');
    currentMood = e.target.dataset.mood;
}

async function handleSendMessage(e) {
    e.preventDefault();
    
    const messageInput = document.getElementById('messageInput');
    const message = messageInput.value.trim();
    
    if (!message) {
        return;
    }
    
    await sendMessage(message);
    messageInput.value = '';
    messageInput.focus();
}

async function sendMessage(message) {
    // Add user message to chat
    addUserMessage(message);
    
    // Show typing indicator
    showTypingIndicator();
    
    // Disable input while processing
    setInputEnabled(false);
    
    try {
        // Generate Neko's response
        const response = await generateNekoResponse(message);
        
        // Hide typing indicator
        hideTypingIndicator();
        
        // Add Neko's response
        addNekoMessage(response);
        
        // Save conversation to database
        await saveConversation(message, response);
        
    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:', error);
        hideTypingIndicator();
        addNekoMessage("‡∏≠‡πä‡∏∞! ‡∏â‡∏±‡∏ô‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞ üòÖ");
    } finally {
        setInputEnabled(true);
    }
}

async function sendQuickMessage(message) {
    await sendMessage(message);
}

function addUserMessage(message) {
    const chatMessages = document.getElementById('chatMessages');
    
    // Remove welcome message if exists
    const welcomeMessage = chatMessages.querySelector('.welcome-message');
    if (welcomeMessage) {
        welcomeMessage.remove();
    }
    
    const messageElement = document.createElement('div');
    messageElement.className = 'message user-message';
    messageElement.innerHTML = `
        <div class="message-avatar">üë§</div>
        <div class="message-content">
            <div class="message-bubble">
                ${formatMessage(message)}
            </div>
            <div class="message-time">
                ${utils.formatTime(new Date())}
            </div>
        </div>
    `;
    
    chatMessages.appendChild(messageElement);
    scrollToBottom();
}

function addNekoMessage(message) {
    const chatMessages = document.getElementById('chatMessages');
    
    const messageElement = document.createElement('div');
    messageElement.className = 'message neko-message';
    messageElement.innerHTML = `
        <div class="message-avatar">üê±</div>
        <div class="message-content">
            <div class="message-bubble">
                ${formatMessage(message)}
            </div>
            <div class="message-time">
                ${utils.formatTime(new Date())}
            </div>
        </div>
    `;
    
    chatMessages.appendChild(messageElement);
    scrollToBottom();
}

function formatMessage(message) {
    return message.replace(/\n/g, '<br>');
}

function showTypingIndicator() {
    document.getElementById('typingIndicator').style.display = 'block';
    scrollToBottom();
}

function hideTypingIndicator() {
    document.getElementById('typingIndicator').style.display = 'none';
}

function setInputEnabled(enabled) {
    const messageInput = document.getElementById('messageInput');
    const sendBtn = document.getElementById('sendBtn');
    
    messageInput.disabled = !enabled;
    sendBtn.disabled = !enabled;
}

async function generateNekoResponse(userMessage) {
    // Simulate AI thinking time
    await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 2000));
    
    const message = userMessage.toLowerCase();
    const userName = currentUser.firstName || '‡∏Ñ‡∏∏‡∏ì';
    
    // Mood-based responses
    const moodResponses = {
        happy: {
            greeting: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${userName}! ‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏î‡∏π‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‚ú®`,
            default: `‡∏î‡∏µ‡∏à‡∏±‡∏á! ${userName} ‡∏î‡∏π‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢ ‡∏â‡∏±‡∏ô‡∏Å‡πá‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏î‡πâ‡∏ß‡∏¢ üòä`
        },
        love: {
            greeting: `‡∏´‡∏ß‡∏≤‡∏¢‡∏¢~ ${userName} ‡∏î‡∏π‡∏´‡∏ß‡∏≤‡∏ô‡πÉ‡∏™‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢ üíï`,
            default: `‡∏≠‡πâ‡∏≤‡∏ß~ ‡∏ü‡∏µ‡∏•‡∏£‡∏±‡∏Å‡πÜ ‡∏´‡∏£‡∏≠? ‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏™‡∏¥ üòç`
        },
        sad: {
            greeting: `‡πÄ‡∏≠‡πä‡∏∞ ${userName} ‡∏î‡∏π‡πÄ‡∏®‡∏£‡πâ‡∏≤‡πÜ ‡∏ô‡∏∞ ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏±‡πâ‡∏¢? ü•∫`,
            default: `‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏ô‡∏∞ ${userName} ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏á ‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏™‡∏°‡∏≠ üíô`
        },
        angry: {
            greeting: `‡πÇ‡∏≠‡πâ‡πÇ‡∏´ ${userName} ‡∏î‡∏π‡πÇ‡∏Å‡∏£‡∏ò‡πÜ ‡∏ô‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Ç‡∏∂‡πâ‡∏ô?`,
            default: `‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô‡πÜ ‡∏ô‡∏∞ ${userName} ‡∏•‡∏≠‡∏á‡∏™‡∏π‡∏î‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å‡πÜ ‡∏î‡∏π üòå`
        },
        tired: {
            greeting: `${userName} ‡∏î‡∏π‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢ ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏á‡∏ô‡∏∞ üò¥`,
            default: `‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å‡∏´‡∏£‡∏≠? ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ ${userName} üåô`
        },
        thinking: {
            greeting: `${userName} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏≠? ‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô‡∏°‡∏±‡πâ‡∏¢? ü§î`,
            default: `‡∏Ñ‡∏¥‡∏î‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏ô‡∏∞ ${userName} ‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡∏≤‡∏á‡∏ö‡πâ‡∏≤‡∏á ‚ú®`
        },
        excited: {
            greeting: `‡∏ß‡πâ‡∏≤‡∏ß! ${userName} ‡∏î‡∏π‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢! ‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ‡πÜ ‡∏´‡∏£‡∏≠? ü§©`,
            default: `‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏µ‡πÜ ‡πÅ‡∏ô‡πà‡πÜ ‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢! ‚ú®`
        },
        confused: {
            greeting: `${userName} ‡∏î‡∏π‡∏á‡∏á‡πÜ ‡∏ô‡∏∞ ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏°‡∏±‡πâ‡∏¢? üòï`,
            default: `‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏ô‡∏∞ ${userName} ‡∏á‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡∏Ñ‡∏¥‡∏î‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô üí≠`
        }
    };
    
    // Pattern matching for responses
    if (message.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || message.includes('‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ') || message.includes('hello')) {
        return moodResponses[currentMood].greeting;
    }
    
    if (message.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å') || message.includes('‡πÅ‡∏ü‡∏ô') || message.includes('‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å')) {
        return `‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏´‡∏£‡∏≠? ${userName} üíï\n\n‡∏â‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©\n\n‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏∏‡∏ç‡πÅ‡∏à‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô ‚ú®`;
    }
    
    if (message.includes('‡πÄ‡∏®‡∏£‡πâ‡∏≤') || message.includes('‡πÅ‡∏¢‡πà') || message.includes('‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à')) {
        return `‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏•‡∏¢ ${userName} ü•∫\n\n‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå\n\n‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á ‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏Å\n\n‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏™‡∏°‡∏≠‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏¢ üíô`;
    }
    
    if (message.includes('‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢') || message.includes('‡∏á‡πà‡∏ß‡∏á') || message.includes('‡∏ô‡∏≠‡∏ô')) {
        return `${userName} ‡∏î‡∏π‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢ üò¥\n\n‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ô‡∏∞ ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏à\n\n‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏õ‡∏ô‡∏≠‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞ ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡∏ù‡∏±‡∏ô‡∏î‡∏µ‡∏ô‡∏∞ üåô`;
    }
    
    if (message.includes('‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß') || message.includes('‡∏≠‡∏≤‡∏´‡∏≤‡∏£') || message.includes('‡∏´‡∏¥‡∏ß')) {
        return `‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏´‡∏£‡∏≠? üçΩÔ∏è\n\n‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏∞ ${userName} ‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á\n\n‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏¥‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÜ ‡∏°‡∏±‡πâ‡∏¢? ‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢! üòã`;
    }
    
    if (message.includes('‡∏á‡∏≤‡∏ô') || message.includes('‡πÄ‡∏£‡∏µ‡∏¢‡∏ô') || message.includes('‡∏™‡∏≠‡∏ö')) {
        return `‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏á‡∏≤‡∏ô/‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏¥‡∏ô‡∏∞ üìö\n\n‡∏â‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡∏°‡∏±‡∏ô‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ß‡πà‡∏≤ ${userName} ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞!\n\n‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏ó‡∏µ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô ‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô\n\n‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏û‡∏±‡∏Å‡∏ö‡πâ‡∏≤‡∏á‡∏ô‡∏∞ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå‡∏î‡∏µ‡πÜ ‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ö‡∏≥‡∏£‡∏∏‡∏á ‚ú®`;
    }
    
    if (message.includes('‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì') || message.includes('thank')) {
        return `‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡πÄ‡∏•‡∏¢ ${userName}! üê±üíï\n\n‡∏â‡∏±‡∏ô‡∏î‡∏µ‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏â‡∏±‡∏ô‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î!\n\n‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏¢‡∏≠‡∏µ‡∏Å ‡∏°‡∏≤‡∏´‡∏≤‡∏â‡∏±‡∏ô‡πÄ‡∏™‡∏°‡∏≠‡∏ô‡∏∞ ‚ú®`;
    }
    
    if (message.includes('‡∏£‡∏±‡∏Å') && message.includes('‡πÄ‡∏ò‡∏≠')) {
        return `‡∏≠‡πâ‡∏≤‡∏ß~ ${userName} ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏à‡∏±‡∏á üòç\n\n‡∏â‡∏±‡∏ô‡∏Å‡πá‡∏£‡∏±‡∏Å ${userName} ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ô‡∏∞! (‡πÅ‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏∞ üòÑ)\n\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏£‡∏π‡πâ‡∏ö‡πâ‡∏≤‡∏á‡∏ô‡∏∞ üíï`;
    }
    
    if (message.includes('‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥') || message.includes('‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤')) {
        return `${userName} ‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏´‡∏£‡∏≠? ü§î\n\n‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏±‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏ô‡∏∞!\n\n‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏ü‡∏±‡∏á‡πÄ‡∏•‡∏¢ ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà üí™`;
    }
    
    if (message.includes('‡πÄ‡∏ö‡∏∑‡πà‡∏≠') || message.includes('‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£')) {
        return `${userName} ‡πÄ‡∏ö‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏≠? üòï\n\n‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà‡πÜ ‡∏î‡∏π‡∏°‡∏±‡πâ‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô:\n- ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ\n- ‡πÅ‡∏ä‡∏ï‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å\n- ‡∏ó‡∏≥ Pomodoro Timer\n- ‡πÅ‡∏Å‡πâ‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå\n\n‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å ‡∏™‡∏π‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ö‡∏£‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå ‡∏Å‡πá‡∏î‡∏µ‡∏ô‡∏∞! üå±`;
    }
    
    // Default responses based on mood
    if (message.includes('?') || message.includes('‡πÑ‡∏´‡∏°') || message.includes('‡∏°‡∏±‡πâ‡∏¢')) {
        return `${userName} ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢! ü§î\n\n${moodResponses[currentMood].default}\n\n‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡∏°‡∏±‡πâ‡∏¢?`;
    }
    
    // Random encouraging responses
    const encouragingResponses = [
        `${userName} ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏ô‡∏∞! ‡∏â‡∏±‡∏ô‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì üíï`,
        `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ${userName} ‡∏ó‡∏≥‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞! ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏á ‚ú®`,
        `‡∏â‡∏±‡∏ô‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤ ${userName} ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡∏∞! üí™`,
        `${userName} ‡∏£‡∏π‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏¢‡∏¥‡πâ‡∏°‡πÑ‡∏î‡πâ? ‡∏ô‡∏±‡πà‡∏ô‡πÅ‡∏´‡∏•‡∏∞‡∏Ñ‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì üåü`
    ];
    
    const funResponses = [
        `‡πÄ‡∏Æ‡πâ‡∏¢ ${userName}! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏™‡∏ô‡∏∏‡∏Å‡πÜ ‡∏°‡∏±‡πâ‡∏¢? ‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢! üéâ`,
        `‡∏â‡∏±‡∏ô‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö ${userName} ‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏°‡∏≤‡∏Å üòä`,
        `${userName} ‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏â‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏°‡∏ß‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏à‡∏∞‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏°‡∏±‡πâ‡∏¢? ‡πÄ‡∏°‡∏µ‡πâ‡∏¢‡∏ß‡∏ß‡∏ß~ üê±`,
        `‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏à‡∏±‡∏á ${userName} ‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏¢‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á? ‡∏â‡∏±‡∏ô‡∏ä‡∏≠‡∏ö‡∏ô‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏ô‡∏Å! üò∏`
    ];
    
    // Choose response type based on mood
    let responses;
    if (currentMood === 'happy' || currentMood === 'excited') {
        responses = funResponses;
    } else {
        responses = encouragingResponses;
    }
    
    return responses[Math.floor(Math.random() * responses.length)];
}

function handleKeyPress(e) {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        document.getElementById('messageForm').dispatchEvent(new Event('submit'));
    }
}

async function loadConversations() {
    try {
        const { data: conversationsData, error } = await supabase
            .from('neko_conversations')
            .select('*')
            .eq('user_id', currentUser.id)
            .order('created_at', { ascending: true })
            .limit(20); // Load last 20 conversations
        
        if (error) {
            throw error;
        }
        
        conversations = conversationsData || [];
        
        // Render previous conversations
        const chatMessages = document.getElementById('chatMessages');
        const welcomeMessage = chatMessages.querySelector('.welcome-message');
        
        if (conversations.length > 0 && welcomeMessage) {
            welcomeMessage.remove();
        }
        
        conversations.forEach(conv => {
            addUserMessage(conv.message);
            addNekoMessage(conv.response);
        });
        
    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤:', error);
    }
}

async function saveConversation(message, response) {
    try {
        const { data, error } = await supabase
            .from('neko_conversations')
            .insert([{
                user_id: currentUser.id,
                message: message,
                response: response,
                mood: currentMood,
                created_at: new Date().toISOString()
            }]);
        
        if (error) {
            throw error;
        }
        
    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤:', error);
    }
}

function scrollToBottom() {
    const chatMessages = document.getElementById('chatMessages');
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

async function logout() {
    const confirmed = await utils.showConfirm(
        'üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö', 
        '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö?',
        '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö',
        '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
        'warning'
    );
    
    if (!confirmed) {
        return;
    }
    
    try {
        // Clean up PresenceManager before logout
        if (window.presenceManager) {
            window.presenceManager.cleanup();
        }
        
        // Sign out from Supabase
        await supabase.auth.signOut();
        
        // Clear local storage
        utils.clearUserSession();
        
        // Redirect to login
        utils.redirect('index.html');
        
    } catch (error) {
        console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö:', error);
        utils.showAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö', 'error');
    }
}

function initializeDropdown() {
    // Ensure dropdown works properly
    const dropdownElementList = document.querySelectorAll('.dropdown-toggle');
    const dropdownList = [...dropdownElementList].map(dropdownToggleEl => new bootstrap.Dropdown(dropdownToggleEl));
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function(event) {
        const dropdowns = document.querySelectorAll('.dropdown-menu.show');
        dropdowns.forEach(dropdown => {
            if (!dropdown.contains(event.target) && !dropdown.previousElementSibling.contains(event.target)) {
                const dropdownInstance = bootstrap.Dropdown.getInstance(dropdown.previousElementSibling);
                if (dropdownInstance) {
                    dropdownInstance.hide();
                }
            }
        });
    });
}

function updateUserDisplay() {
    const userName = document.getElementById('userName');
    if (userName && currentUser) {
        userName.textContent = `${currentUser.firstName} ${currentUser.lastName}`;
    }
}

// Navigation functions
function showProfile() {
    utils.redirect('settings.html');
}

console.log('‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ Neko Chat ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
